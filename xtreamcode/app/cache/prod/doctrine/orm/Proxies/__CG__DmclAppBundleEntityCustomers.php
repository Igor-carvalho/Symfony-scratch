<?php

namespace Proxies\__CG__\Dmcl\AppBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Customers extends \Dmcl\AppBundle\Entity\Customers implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\Customers' . "\0" . 'id', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\Customers' . "\0" . 'name', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\Customers' . "\0" . 'username', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\Customers' . "\0" . 'concurrentConnections', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\Customers' . "\0" . 'code', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\Customers' . "\0" . 'password', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\Customers' . "\0" . 'salt', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\Customers' . "\0" . 'email', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\Customers' . "\0" . 'enabled', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\Customers' . "\0" . 'macs', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\Customers' . "\0" . 'ips', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\Customers' . "\0" . 'country', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\Customers' . "\0" . 'customerOrders'];
        }

        return ['__isInitialized__', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\Customers' . "\0" . 'id', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\Customers' . "\0" . 'name', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\Customers' . "\0" . 'username', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\Customers' . "\0" . 'concurrentConnections', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\Customers' . "\0" . 'code', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\Customers' . "\0" . 'password', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\Customers' . "\0" . 'salt', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\Customers' . "\0" . 'email', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\Customers' . "\0" . 'enabled', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\Customers' . "\0" . 'macs', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\Customers' . "\0" . 'ips', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\Customers' . "\0" . 'country', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\Customers' . "\0" . 'customerOrders'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Customers $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setEmail($email)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmail', [$email]);

        return parent::setEmail($email);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmail', []);

        return parent::getEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function setEnabled($enabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEnabled', [$enabled]);

        return parent::setEnabled($enabled);
    }

    /**
     * {@inheritDoc}
     */
    public function getEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEnabled', []);

        return parent::getEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function isEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isEnabled', []);

        return parent::isEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setMacs($macs)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMacs', [$macs]);

        return parent::setMacs($macs);
    }

    /**
     * {@inheritDoc}
     */
    public function getMacs()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMacs', []);

        return parent::getMacs();
    }

    /**
     * {@inheritDoc}
     */
    public function setCountry($country)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCountry', [$country]);

        return parent::setCountry($country);
    }

    /**
     * {@inheritDoc}
     */
    public function getCountry()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCountry', []);

        return parent::getCountry();
    }

    /**
     * {@inheritDoc}
     */
    public function getRoles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoles', []);

        return parent::getRoles();
    }

    /**
     * {@inheritDoc}
     */
    public function getPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', []);

        return parent::getPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function getSalt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSalt', []);

        return parent::getSalt();
    }

    /**
     * {@inheritDoc}
     */
    public function getUsername()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsername', []);

        return parent::getUsername();
    }

    /**
     * {@inheritDoc}
     */
    public function eraseCredentials()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'eraseCredentials', []);

        return parent::eraseCredentials();
    }

    /**
     * {@inheritDoc}
     */
    public function setUsername($username)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUsername', [$username]);

        return parent::setUsername($username);
    }

    /**
     * {@inheritDoc}
     */
    public function setCode($code)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCode', [$code]);

        return parent::setCode($code);
    }

    /**
     * {@inheritDoc}
     */
    public function getCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCode', []);

        return parent::getCode();
    }

    /**
     * {@inheritDoc}
     */
    public function setPassword($password)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', [$password]);

        return parent::setPassword($password);
    }

    /**
     * {@inheritDoc}
     */
    public function setSalt($salt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSalt', [$salt]);

        return parent::setSalt($salt);
    }

    /**
     * {@inheritDoc}
     */
    public function setIps($ips)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIps', [$ips]);

        return parent::setIps($ips);
    }

    /**
     * {@inheritDoc}
     */
    public function getIps()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIps', []);

        return parent::getIps();
    }

    /**
     * {@inheritDoc}
     */
    public function getConcurrentConnections()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getConcurrentConnections', []);

        return parent::getConcurrentConnections();
    }

    /**
     * {@inheritDoc}
     */
    public function setConcurrentConnections($concurrentConnections)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setConcurrentConnections', [$concurrentConnections]);

        return parent::setConcurrentConnections($concurrentConnections);
    }

    /**
     * {@inheritDoc}
     */
    public function addCustomerOrders(\Dmcl\AppBundle\Entity\CustomerOrders $customerOrders)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCustomerOrders', [$customerOrders]);

        return parent::addCustomerOrders($customerOrders);
    }

    /**
     * {@inheritDoc}
     */
    public function removeCustomerOrders(\Dmcl\AppBundle\Entity\CustomerOrders $customerOrders)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCustomerOrders', [$customerOrders]);

        return parent::removeCustomerOrders($customerOrders);
    }

    /**
     * {@inheritDoc}
     */
    public function getCustomerOrders()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCustomerOrders', []);

        return parent::getCustomerOrders();
    }

    /**
     * {@inheritDoc}
     */
    public function addCustomerOrder(\Dmcl\AppBundle\Entity\CustomerOrders $customerOrder)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCustomerOrder', [$customerOrder]);

        return parent::addCustomerOrder($customerOrder);
    }

    /**
     * {@inheritDoc}
     */
    public function removeCustomerOrder(\Dmcl\AppBundle\Entity\CustomerOrders $customerOrder)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCustomerOrder', [$customerOrder]);

        return parent::removeCustomerOrder($customerOrder);
    }

}
