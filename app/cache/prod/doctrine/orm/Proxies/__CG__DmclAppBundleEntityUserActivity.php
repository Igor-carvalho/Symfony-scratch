<?php

namespace Proxies\__CG__\Dmcl\AppBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class UserActivity extends \Dmcl\AppBundle\Entity\UserActivity implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\UserActivity' . "\0" . 'activityId', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\UserActivity' . "\0" . 'userAgent', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\UserActivity' . "\0" . 'userIp', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\UserActivity' . "\0" . 'container', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\UserActivity' . "\0" . 'dateStart', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\UserActivity' . "\0" . 'dateEnd', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\UserActivity' . "\0" . 'geoipCountryCode', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\UserActivity' . "\0" . 'isp', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\UserActivity' . "\0" . 'externalDevice', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\UserActivity' . "\0" . 'divergence', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\UserActivity' . "\0" . 'user', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\UserActivity' . "\0" . 'stream', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\UserActivity' . "\0" . 'server'];
        }

        return ['__isInitialized__', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\UserActivity' . "\0" . 'activityId', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\UserActivity' . "\0" . 'userAgent', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\UserActivity' . "\0" . 'userIp', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\UserActivity' . "\0" . 'container', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\UserActivity' . "\0" . 'dateStart', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\UserActivity' . "\0" . 'dateEnd', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\UserActivity' . "\0" . 'geoipCountryCode', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\UserActivity' . "\0" . 'isp', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\UserActivity' . "\0" . 'externalDevice', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\UserActivity' . "\0" . 'divergence', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\UserActivity' . "\0" . 'user', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\UserActivity' . "\0" . 'stream', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\UserActivity' . "\0" . 'server'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (UserActivity $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getActivityId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getActivityId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActivityId', []);

        return parent::getActivityId();
    }

    /**
     * {@inheritDoc}
     */
    public function setUserAgent($userAgent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUserAgent', [$userAgent]);

        return parent::setUserAgent($userAgent);
    }

    /**
     * {@inheritDoc}
     */
    public function getUserAgent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserAgent', []);

        return parent::getUserAgent();
    }

    /**
     * {@inheritDoc}
     */
    public function setUserIp($userIp)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUserIp', [$userIp]);

        return parent::setUserIp($userIp);
    }

    /**
     * {@inheritDoc}
     */
    public function getUserIp()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserIp', []);

        return parent::getUserIp();
    }

    /**
     * {@inheritDoc}
     */
    public function setContainer($container)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContainer', [$container]);

        return parent::setContainer($container);
    }

    /**
     * {@inheritDoc}
     */
    public function getContainer()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContainer', []);

        return parent::getContainer();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateStart($dateStart)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateStart', [$dateStart]);

        return parent::setDateStart($dateStart);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateStart()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateStart', []);

        return parent::getDateStart();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateEnd($dateEnd)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateEnd', [$dateEnd]);

        return parent::setDateEnd($dateEnd);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateEnd()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateEnd', []);

        return parent::getDateEnd();
    }

    /**
     * {@inheritDoc}
     */
    public function setGeoipCountryCode($geoipCountryCode)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGeoipCountryCode', [$geoipCountryCode]);

        return parent::setGeoipCountryCode($geoipCountryCode);
    }

    /**
     * {@inheritDoc}
     */
    public function getGeoipCountryCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGeoipCountryCode', []);

        return parent::getGeoipCountryCode();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsp($isp)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsp', [$isp]);

        return parent::setIsp($isp);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsp()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsp', []);

        return parent::getIsp();
    }

    /**
     * {@inheritDoc}
     */
    public function setExternalDevice($externalDevice)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExternalDevice', [$externalDevice]);

        return parent::setExternalDevice($externalDevice);
    }

    /**
     * {@inheritDoc}
     */
    public function getExternalDevice()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExternalDevice', []);

        return parent::getExternalDevice();
    }

    /**
     * {@inheritDoc}
     */
    public function setDivergence($divergence)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDivergence', [$divergence]);

        return parent::setDivergence($divergence);
    }

    /**
     * {@inheritDoc}
     */
    public function getDivergence()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDivergence', []);

        return parent::getDivergence();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser(\Dmcl\AppBundle\Entity\Users $user = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', [$user]);

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', []);

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setStream(\Dmcl\AppBundle\Entity\Streams $stream = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStream', [$stream]);

        return parent::setStream($stream);
    }

    /**
     * {@inheritDoc}
     */
    public function getStream()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStream', []);

        return parent::getStream();
    }

    /**
     * {@inheritDoc}
     */
    public function setServer(\Dmcl\AppBundle\Entity\StreamingServers $server = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setServer', [$server]);

        return parent::setServer($server);
    }

    /**
     * {@inheritDoc}
     */
    public function getServer()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getServer', []);

        return parent::getServer();
    }

}
