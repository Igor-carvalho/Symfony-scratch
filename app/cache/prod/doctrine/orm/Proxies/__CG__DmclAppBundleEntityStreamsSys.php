<?php

namespace Proxies\__CG__\Dmcl\AppBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class StreamsSys extends \Dmcl\AppBundle\Entity\StreamsSys implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamsSys' . "\0" . 'serverStreamId', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamsSys' . "\0" . 'streamId', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamsSys' . "\0" . 'serverId', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamsSys' . "\0" . 'parentId', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamsSys' . "\0" . 'pid', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamsSys' . "\0" . 'toAnalyze', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamsSys' . "\0" . 'streamStatus', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamsSys' . "\0" . 'streamStarted', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamsSys' . "\0" . 'streamInfo', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamsSys' . "\0" . 'monitorPid', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamsSys' . "\0" . 'currentSource', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamsSys' . "\0" . 'bitrate', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamsSys' . "\0" . 'progressInfo', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamsSys' . "\0" . 'onDemand', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamsSys' . "\0" . 'delayPid', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamsSys' . "\0" . 'delayAvailableAt'];
        }

        return ['__isInitialized__', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamsSys' . "\0" . 'serverStreamId', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamsSys' . "\0" . 'streamId', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamsSys' . "\0" . 'serverId', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamsSys' . "\0" . 'parentId', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamsSys' . "\0" . 'pid', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamsSys' . "\0" . 'toAnalyze', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamsSys' . "\0" . 'streamStatus', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamsSys' . "\0" . 'streamStarted', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamsSys' . "\0" . 'streamInfo', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamsSys' . "\0" . 'monitorPid', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamsSys' . "\0" . 'currentSource', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamsSys' . "\0" . 'bitrate', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamsSys' . "\0" . 'progressInfo', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamsSys' . "\0" . 'onDemand', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamsSys' . "\0" . 'delayPid', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamsSys' . "\0" . 'delayAvailableAt'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (StreamsSys $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getServerStreamId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getServerStreamId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getServerStreamId', []);

        return parent::getServerStreamId();
    }

    /**
     * {@inheritDoc}
     */
    public function setStreamId($streamId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStreamId', [$streamId]);

        return parent::setStreamId($streamId);
    }

    /**
     * {@inheritDoc}
     */
    public function getStreamId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStreamId', []);

        return parent::getStreamId();
    }

    /**
     * {@inheritDoc}
     */
    public function setServerId($serverId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setServerId', [$serverId]);

        return parent::setServerId($serverId);
    }

    /**
     * {@inheritDoc}
     */
    public function getServerId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getServerId', []);

        return parent::getServerId();
    }

    /**
     * {@inheritDoc}
     */
    public function setParentId($parentId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParentId', [$parentId]);

        return parent::setParentId($parentId);
    }

    /**
     * {@inheritDoc}
     */
    public function getParentId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParentId', []);

        return parent::getParentId();
    }

    /**
     * {@inheritDoc}
     */
    public function setPid($pid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPid', [$pid]);

        return parent::setPid($pid);
    }

    /**
     * {@inheritDoc}
     */
    public function getPid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPid', []);

        return parent::getPid();
    }

    /**
     * {@inheritDoc}
     */
    public function setToAnalyze($toAnalyze)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setToAnalyze', [$toAnalyze]);

        return parent::setToAnalyze($toAnalyze);
    }

    /**
     * {@inheritDoc}
     */
    public function getToAnalyze()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getToAnalyze', []);

        return parent::getToAnalyze();
    }

    /**
     * {@inheritDoc}
     */
    public function setStreamStatus($streamStatus)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStreamStatus', [$streamStatus]);

        return parent::setStreamStatus($streamStatus);
    }

    /**
     * {@inheritDoc}
     */
    public function getStreamStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStreamStatus', []);

        return parent::getStreamStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setStreamStarted($streamStarted)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStreamStarted', [$streamStarted]);

        return parent::setStreamStarted($streamStarted);
    }

    /**
     * {@inheritDoc}
     */
    public function getStreamStarted()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStreamStarted', []);

        return parent::getStreamStarted();
    }

    /**
     * {@inheritDoc}
     */
    public function setStreamInfo($streamInfo)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStreamInfo', [$streamInfo]);

        return parent::setStreamInfo($streamInfo);
    }

    /**
     * {@inheritDoc}
     */
    public function getStreamInfo()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStreamInfo', []);

        return parent::getStreamInfo();
    }

    /**
     * {@inheritDoc}
     */
    public function setMonitorPid($monitorPid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMonitorPid', [$monitorPid]);

        return parent::setMonitorPid($monitorPid);
    }

    /**
     * {@inheritDoc}
     */
    public function getMonitorPid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMonitorPid', []);

        return parent::getMonitorPid();
    }

    /**
     * {@inheritDoc}
     */
    public function setCurrentSource($currentSource)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCurrentSource', [$currentSource]);

        return parent::setCurrentSource($currentSource);
    }

    /**
     * {@inheritDoc}
     */
    public function getCurrentSource()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCurrentSource', []);

        return parent::getCurrentSource();
    }

    /**
     * {@inheritDoc}
     */
    public function setBitrate($bitrate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBitrate', [$bitrate]);

        return parent::setBitrate($bitrate);
    }

    /**
     * {@inheritDoc}
     */
    public function getBitrate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBitrate', []);

        return parent::getBitrate();
    }

    /**
     * {@inheritDoc}
     */
    public function setProgressInfo($progressInfo)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProgressInfo', [$progressInfo]);

        return parent::setProgressInfo($progressInfo);
    }

    /**
     * {@inheritDoc}
     */
    public function getProgressInfo()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProgressInfo', []);

        return parent::getProgressInfo();
    }

    /**
     * {@inheritDoc}
     */
    public function setOnDemand($onDemand)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOnDemand', [$onDemand]);

        return parent::setOnDemand($onDemand);
    }

    /**
     * {@inheritDoc}
     */
    public function getOnDemand()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOnDemand', []);

        return parent::getOnDemand();
    }

    /**
     * {@inheritDoc}
     */
    public function setDelayPid($delayPid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDelayPid', [$delayPid]);

        return parent::setDelayPid($delayPid);
    }

    /**
     * {@inheritDoc}
     */
    public function getDelayPid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDelayPid', []);

        return parent::getDelayPid();
    }

    /**
     * {@inheritDoc}
     */
    public function setDelayAvailableAt($delayAvailableAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDelayAvailableAt', [$delayAvailableAt]);

        return parent::setDelayAvailableAt($delayAvailableAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getDelayAvailableAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDelayAvailableAt', []);

        return parent::getDelayAvailableAt();
    }

}
