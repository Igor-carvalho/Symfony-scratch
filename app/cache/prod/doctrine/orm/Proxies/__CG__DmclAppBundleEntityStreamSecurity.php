<?php

namespace Proxies\__CG__\Dmcl\AppBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class StreamSecurity extends \Dmcl\AppBundle\Entity\StreamSecurity implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamSecurity' . "\0" . 'id', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamSecurity' . "\0" . 'mediaType', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamSecurity' . "\0" . 'mediaId', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamSecurity' . "\0" . 'serverId', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamSecurity' . "\0" . 'token', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamSecurity' . "\0" . 'createdAt', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamSecurity' . "\0" . 'expireAt', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamSecurity' . "\0" . 'displayed', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamSecurity' . "\0" . 'owner', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamSecurity' . "\0" . 'customer', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamSecurity' . "\0" . 'protocol', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamSecurity' . "\0" . 'fakePath', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamSecurity' . "\0" . 'originalPath', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamSecurity' . "\0" . 'playlist'];
        }

        return ['__isInitialized__', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamSecurity' . "\0" . 'id', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamSecurity' . "\0" . 'mediaType', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamSecurity' . "\0" . 'mediaId', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamSecurity' . "\0" . 'serverId', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamSecurity' . "\0" . 'token', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamSecurity' . "\0" . 'createdAt', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamSecurity' . "\0" . 'expireAt', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamSecurity' . "\0" . 'displayed', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamSecurity' . "\0" . 'owner', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamSecurity' . "\0" . 'customer', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamSecurity' . "\0" . 'protocol', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamSecurity' . "\0" . 'fakePath', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamSecurity' . "\0" . 'originalPath', '' . "\0" . 'Dmcl\\AppBundle\\Entity\\StreamSecurity' . "\0" . 'playlist'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (StreamSecurity $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setMediaType($mediaType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMediaType', [$mediaType]);

        return parent::setMediaType($mediaType);
    }

    /**
     * {@inheritDoc}
     */
    public function getMediaType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMediaType', []);

        return parent::getMediaType();
    }

    /**
     * {@inheritDoc}
     */
    public function setMediaId($mediaId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMediaId', [$mediaId]);

        return parent::setMediaId($mediaId);
    }

    /**
     * {@inheritDoc}
     */
    public function getMediaId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMediaId', []);

        return parent::getMediaId();
    }

    /**
     * {@inheritDoc}
     */
    public function setToken($token)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setToken', [$token]);

        return parent::setToken($token);
    }

    /**
     * {@inheritDoc}
     */
    public function getToken()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getToken', []);

        return parent::getToken();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt($createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setExpireAt($expireAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExpireAt', [$expireAt]);

        return parent::setExpireAt($expireAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getExpireAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExpireAt', []);

        return parent::getExpireAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setDisplayed($displayed)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDisplayed', [$displayed]);

        return parent::setDisplayed($displayed);
    }

    /**
     * {@inheritDoc}
     */
    public function getDisplayed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDisplayed', []);

        return parent::getDisplayed();
    }

    /**
     * {@inheritDoc}
     */
    public function getCustomer()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCustomer', []);

        return parent::getCustomer();
    }

    /**
     * {@inheritDoc}
     */
    public function setCustomer($customer)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCustomer', [$customer]);

        return parent::setCustomer($customer);
    }

    /**
     * {@inheritDoc}
     */
    public function getOwner()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOwner', []);

        return parent::getOwner();
    }

    /**
     * {@inheritDoc}
     */
    public function setOwner($owner)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOwner', [$owner]);

        return parent::setOwner($owner);
    }

    /**
     * {@inheritDoc}
     */
    public function setProtocol($protocol)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProtocol', [$protocol]);

        return parent::setProtocol($protocol);
    }

    /**
     * {@inheritDoc}
     */
    public function getProtocol()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProtocol', []);

        return parent::getProtocol();
    }

    /**
     * {@inheritDoc}
     */
    public function getFakePath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFakePath', []);

        return parent::getFakePath();
    }

    /**
     * {@inheritDoc}
     */
    public function setFakePath($fakePath)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFakePath', [$fakePath]);

        return parent::setFakePath($fakePath);
    }

    /**
     * {@inheritDoc}
     */
    public function getOriginalPath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOriginalPath', []);

        return parent::getOriginalPath();
    }

    /**
     * {@inheritDoc}
     */
    public function setOriginalPath($originalPath)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOriginalPath', [$originalPath]);

        return parent::setOriginalPath($originalPath);
    }

    /**
     * {@inheritDoc}
     */
    public function getPlaylist()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPlaylist', []);

        return parent::getPlaylist();
    }

    /**
     * {@inheritDoc}
     */
    public function setPlaylist($playlist)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPlaylist', [$playlist]);

        return parent::setPlaylist($playlist);
    }

    /**
     * {@inheritDoc}
     */
    public function getServerId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getServerId', []);

        return parent::getServerId();
    }

    /**
     * {@inheritDoc}
     */
    public function setServerId($serverId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setServerId', [$serverId]);

        return parent::setServerId($serverId);
    }

    /**
     * {@inheritDoc}
     */
    public function createFakePath($base = '127.0.0.1', $proxy = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'createFakePath', [$base, $proxy]);

        return parent::createFakePath($base, $proxy);
    }

}
